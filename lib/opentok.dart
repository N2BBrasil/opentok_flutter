// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ConnectionState {
  loggedOut,
  loggedIn,
  wait,
  onCall,
  error,
  subscriberDisconnect,
}

enum AudioOutputDevice {
  speaker,
  receiver,
  headphone,
  bluetooth,
}

enum CameraState {
  on,
  off,
}

class CameraStateCallback {
  CameraStateCallback({
    required this.state,
  });

  CameraState state;

  Object encode() {
    return <Object?>[
      state.index,
    ];
  }

  static CameraStateCallback decode(Object result) {
    result as List<Object?>;
    return CameraStateCallback(
      state: CameraState.values[result[0]! as int],
    );
  }
}

class AudioOutputDeviceCallback {
  AudioOutputDeviceCallback({
    required this.device,
  });

  AudioOutputDevice device;

  Object encode() {
    return <Object?>[
      device.index,
    ];
  }

  static AudioOutputDeviceCallback decode(Object result) {
    result as List<Object?>;
    return AudioOutputDeviceCallback(
      device: AudioOutputDevice.values[result[0]! as int],
    );
  }
}

class ConnectionStateCallback {
  ConnectionStateCallback({
    required this.state,
    this.errorDescription,
  });

  ConnectionState state;

  String? errorDescription;

  Object encode() {
    return <Object?>[
      state.index,
      errorDescription,
    ];
  }

  static ConnectionStateCallback decode(Object result) {
    result as List<Object?>;
    return ConnectionStateCallback(
      state: ConnectionState.values[result[0]! as int],
      errorDescription: result[1] as String?,
    );
  }
}

class OpenTokConfig {
  OpenTokConfig({
    required this.apiKey,
    required this.sessionId,
    required this.token,
  });

  String apiKey;

  String sessionId;

  String token;

  Object encode() {
    return <Object?>[
      apiKey,
      sessionId,
      token,
    ];
  }

  static OpenTokConfig decode(Object result) {
    result as List<Object?>;
    return OpenTokConfig(
      apiKey: result[0]! as String,
      sessionId: result[1]! as String,
      token: result[2]! as String,
    );
  }
}

class _OpenTokHostApiCodec extends StandardMessageCodec {
  const _OpenTokHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is OpenTokConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return OpenTokConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class OpenTokHostApi {
  /// Constructor for [OpenTokHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  OpenTokHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _OpenTokHostApiCodec();

  Future<void> initSession(OpenTokConfig arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.initSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> endSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.endSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggleCamera() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.toggleCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggleAudio(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.toggleAudio', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggleVideo(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.toggleVideo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onPause() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.onPause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onResume() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.onResume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onStop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.onStop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> getConnectionId() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.getConnectionId', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<List<String?>> listAvailableOutputDevices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.listAvailableOutputDevices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  Future<void> setOutputDevice(AudioOutputDevice arg_device) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OpenTokHostApi.setOutputDevice', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_device.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _OpenTokPlatformApiCodec extends StandardMessageCodec {
  const _OpenTokPlatformApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AudioOutputDeviceCallback) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CameraStateCallback) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ConnectionStateCallback) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AudioOutputDeviceCallback.decode(readValue(buffer)!);
      case 129: 
        return CameraStateCallback.decode(readValue(buffer)!);
      case 130: 
        return ConnectionStateCallback.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class OpenTokPlatformApi {
  static const MessageCodec<Object?> codec = _OpenTokPlatformApiCodec();

  void onStateUpdate(ConnectionStateCallback connectionState);

  void onOutputDeviceUpdate(AudioOutputDeviceCallback outputDevice);

  void onSubscriberCameraStateUpdate(CameraStateCallback cameraState);

  static void setup(OpenTokPlatformApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.OpenTokPlatformApi.onStateUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onStateUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectionStateCallback? arg_connectionState = (args[0] as ConnectionStateCallback?);
          assert(arg_connectionState != null,
              'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onStateUpdate was null, expected non-null ConnectionStateCallback.');
          api.onStateUpdate(arg_connectionState!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.OpenTokPlatformApi.onOutputDeviceUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onOutputDeviceUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AudioOutputDeviceCallback? arg_outputDevice = (args[0] as AudioOutputDeviceCallback?);
          assert(arg_outputDevice != null,
              'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onOutputDeviceUpdate was null, expected non-null AudioOutputDeviceCallback.');
          api.onOutputDeviceUpdate(arg_outputDevice!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.OpenTokPlatformApi.onSubscriberCameraStateUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onSubscriberCameraStateUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraStateCallback? arg_cameraState = (args[0] as CameraStateCallback?);
          assert(arg_cameraState != null,
              'Argument for dev.flutter.pigeon.OpenTokPlatformApi.onSubscriberCameraStateUpdate was null, expected non-null CameraStateCallback.');
          api.onSubscriberCameraStateUpdate(arg_cameraState!);
          return;
        });
      }
    }
  }
}
