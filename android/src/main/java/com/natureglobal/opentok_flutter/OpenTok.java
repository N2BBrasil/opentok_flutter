// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.natureglobal.opentok_flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class OpenTok {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum ConnectionState {
    LOGGED_OUT(0),
    LOGGED_IN(1),
    WAIT(2),
    ON_CALL(3),
    ERROR(4),
    SUBSCRIBER_DISCONNECT(5);

    final int index;

    private ConnectionState(final int index) {
      this.index = index;
    }
  }

  public enum AudioOutputDevice {
    SPEAKER(0),
    RECEIVER(1),
    HEADPHONE(2),
    BLUETOOTH(3);

    final int index;

    private AudioOutputDevice(final int index) {
      this.index = index;
    }
  }

  public enum CameraState {
    ON(0),
    OFF(1);

    final int index;

    private CameraState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CameraStateCallback {
    private @NonNull CameraState state;

    public @NonNull CameraState getState() {
      return state;
    }

    public void setState(@NonNull CameraState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CameraStateCallback() {}

    public static final class Builder {

      private @Nullable CameraState state;

      public @NonNull Builder setState(@NonNull CameraState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull CameraStateCallback build() {
        CameraStateCallback pigeonReturn = new CameraStateCallback();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(state == null ? null : state.index);
      return toListResult;
    }

    static @NonNull CameraStateCallback fromList(@NonNull ArrayList<Object> list) {
      CameraStateCallback pigeonResult = new CameraStateCallback();
      Object state = list.get(0);
      pigeonResult.setState(state == null ? null : CameraState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AudioOutputDeviceCallback {
    private @NonNull AudioOutputDevice device;

    public @NonNull AudioOutputDevice getDevice() {
      return device;
    }

    public void setDevice(@NonNull AudioOutputDevice setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"device\" is null.");
      }
      this.device = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AudioOutputDeviceCallback() {}

    public static final class Builder {

      private @Nullable AudioOutputDevice device;

      public @NonNull Builder setDevice(@NonNull AudioOutputDevice setterArg) {
        this.device = setterArg;
        return this;
      }

      public @NonNull AudioOutputDeviceCallback build() {
        AudioOutputDeviceCallback pigeonReturn = new AudioOutputDeviceCallback();
        pigeonReturn.setDevice(device);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(device == null ? null : device.index);
      return toListResult;
    }

    static @NonNull AudioOutputDeviceCallback fromList(@NonNull ArrayList<Object> list) {
      AudioOutputDeviceCallback pigeonResult = new AudioOutputDeviceCallback();
      Object device = list.get(0);
      pigeonResult.setDevice(device == null ? null : AudioOutputDevice.values()[(int) device]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConnectionStateCallback {
    private @NonNull ConnectionState state;

    public @NonNull ConnectionState getState() {
      return state;
    }

    public void setState(@NonNull ConnectionState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @Nullable String errorDescription;

    public @Nullable String getErrorDescription() {
      return errorDescription;
    }

    public void setErrorDescription(@Nullable String setterArg) {
      this.errorDescription = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConnectionStateCallback() {}

    public static final class Builder {

      private @Nullable ConnectionState state;

      public @NonNull Builder setState(@NonNull ConnectionState setterArg) {
        this.state = setterArg;
        return this;
      }

      private @Nullable String errorDescription;

      public @NonNull Builder setErrorDescription(@Nullable String setterArg) {
        this.errorDescription = setterArg;
        return this;
      }

      public @NonNull ConnectionStateCallback build() {
        ConnectionStateCallback pigeonReturn = new ConnectionStateCallback();
        pigeonReturn.setState(state);
        pigeonReturn.setErrorDescription(errorDescription);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(state == null ? null : state.index);
      toListResult.add(errorDescription);
      return toListResult;
    }

    static @NonNull ConnectionStateCallback fromList(@NonNull ArrayList<Object> list) {
      ConnectionStateCallback pigeonResult = new ConnectionStateCallback();
      Object state = list.get(0);
      pigeonResult.setState(state == null ? null : ConnectionState.values()[(int) state]);
      Object errorDescription = list.get(1);
      pigeonResult.setErrorDescription((String) errorDescription);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OpenTokConfig {
    private @NonNull String apiKey;

    public @NonNull String getApiKey() {
      return apiKey;
    }

    public void setApiKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiKey\" is null.");
      }
      this.apiKey = setterArg;
    }

    private @NonNull String sessionId;

    public @NonNull String getSessionId() {
      return sessionId;
    }

    public void setSessionId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionId\" is null.");
      }
      this.sessionId = setterArg;
    }

    private @NonNull String token;

    public @NonNull String getToken() {
      return token;
    }

    public void setToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"token\" is null.");
      }
      this.token = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OpenTokConfig() {}

    public static final class Builder {

      private @Nullable String apiKey;

      public @NonNull Builder setApiKey(@NonNull String setterArg) {
        this.apiKey = setterArg;
        return this;
      }

      private @Nullable String sessionId;

      public @NonNull Builder setSessionId(@NonNull String setterArg) {
        this.sessionId = setterArg;
        return this;
      }

      private @Nullable String token;

      public @NonNull Builder setToken(@NonNull String setterArg) {
        this.token = setterArg;
        return this;
      }

      public @NonNull OpenTokConfig build() {
        OpenTokConfig pigeonReturn = new OpenTokConfig();
        pigeonReturn.setApiKey(apiKey);
        pigeonReturn.setSessionId(sessionId);
        pigeonReturn.setToken(token);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(apiKey);
      toListResult.add(sessionId);
      toListResult.add(token);
      return toListResult;
    }

    static @NonNull OpenTokConfig fromList(@NonNull ArrayList<Object> list) {
      OpenTokConfig pigeonResult = new OpenTokConfig();
      Object apiKey = list.get(0);
      pigeonResult.setApiKey((String) apiKey);
      Object sessionId = list.get(1);
      pigeonResult.setSessionId((String) sessionId);
      Object token = list.get(2);
      pigeonResult.setToken((String) token);
      return pigeonResult;
    }
  }

  private static class OpenTokHostApiCodec extends StandardMessageCodec {
    public static final OpenTokHostApiCodec INSTANCE = new OpenTokHostApiCodec();

    private OpenTokHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return OpenTokConfig.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof OpenTokConfig) {
        stream.write(128);
        writeValue(stream, ((OpenTokConfig) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface OpenTokHostApi {

    void initSession(@NonNull OpenTokConfig config);

    void endSession();

    void toggleCamera();

    void toggleAudio(@NonNull Boolean enabled);

    void toggleVideo(@NonNull Boolean enabled);

    void onPause();

    void onResume();

    void onStop();

    @Nullable 
    String getConnectionId();

    @NonNull 
    List<String> listAvailableOutputDevices();

    void setOutputDevice(@NonNull AudioOutputDevice device);

    /** The codec used by OpenTokHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return OpenTokHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `OpenTokHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable OpenTokHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.initSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                OpenTokConfig configArg = (OpenTokConfig) args.get(0);
                try {
                  api.initSession(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.endSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.endSession();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.toggleCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.toggleCamera();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.toggleAudio", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.toggleAudio(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.toggleVideo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.toggleVideo(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.onPause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onPause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.onResume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onResume();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.onStop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onStop();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.getConnectionId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getConnectionId();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.listAvailableOutputDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<String> output = api.listAvailableOutputDevices();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.OpenTokHostApi.setOutputDevice", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AudioOutputDevice deviceArg = args.get(0) == null ? null : AudioOutputDevice.values()[(int) args.get(0)];
                try {
                  api.setOutputDevice(deviceArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class OpenTokPlatformApiCodec extends StandardMessageCodec {
    public static final OpenTokPlatformApiCodec INSTANCE = new OpenTokPlatformApiCodec();

    private OpenTokPlatformApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AudioOutputDeviceCallback.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return CameraStateCallback.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConnectionStateCallback.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AudioOutputDeviceCallback) {
        stream.write(128);
        writeValue(stream, ((AudioOutputDeviceCallback) value).toList());
      } else if (value instanceof CameraStateCallback) {
        stream.write(129);
        writeValue(stream, ((CameraStateCallback) value).toList());
      } else if (value instanceof ConnectionStateCallback) {
        stream.write(130);
        writeValue(stream, ((ConnectionStateCallback) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OpenTokPlatformApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OpenTokPlatformApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by OpenTokPlatformApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return OpenTokPlatformApiCodec.INSTANCE;
    }
    public void onStateUpdate(@NonNull ConnectionStateCallback connectionStateArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.OpenTokPlatformApi.onStateUpdate", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(connectionStateArg)),
          channelReply -> callback.reply(null));
    }
    public void onOutputDeviceUpdate(@NonNull AudioOutputDeviceCallback outputDeviceArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.OpenTokPlatformApi.onOutputDeviceUpdate", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(outputDeviceArg)),
          channelReply -> callback.reply(null));
    }
    public void onSubscriberCameraStateUpdate(@NonNull CameraStateCallback cameraStateArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.OpenTokPlatformApi.onSubscriberCameraStateUpdate", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(cameraStateArg)),
          channelReply -> callback.reply(null));
    }
  }
}
