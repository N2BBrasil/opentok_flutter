// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, FLTConnectionState) {
  FLTConnectionStateLoggedOut = 0,
  FLTConnectionStateLoggedIn = 1,
  FLTConnectionStateWait = 2,
  FLTConnectionStateOnCall = 3,
  FLTConnectionStateError = 4,
  FLTConnectionStateSubscriberDisconnect = 5,
};

typedef NS_ENUM(NSUInteger, FLTAudioOutputDevice) {
  FLTAudioOutputDeviceSpeaker = 0,
  FLTAudioOutputDeviceReceiver = 1,
  FLTAudioOutputDeviceHeadphone = 2,
  FLTAudioOutputDeviceBluetooth = 3,
};

typedef NS_ENUM(NSUInteger, FLTCameraState) {
  FLTCameraStateOn = 0,
  FLTCameraStateOff = 1,
};

@class FLTCameraStateCallback;
@class FLTAudioOutputDeviceCallback;
@class FLTConnectionStateCallback;
@class FLTOpenTokConfig;

@interface FLTCameraStateCallback : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithState:(FLTCameraState)state;
@property(nonatomic, assign) FLTCameraState state;
@end

@interface FLTAudioOutputDeviceCallback : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithDevice:(FLTAudioOutputDevice)device;
@property(nonatomic, assign) FLTAudioOutputDevice device;
@end

@interface FLTConnectionStateCallback : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithState:(FLTConnectionState)state
    errorDescription:(nullable NSString *)errorDescription;
@property(nonatomic, assign) FLTConnectionState state;
@property(nonatomic, copy, nullable) NSString * errorDescription;
@end

@interface FLTOpenTokConfig : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    sessionId:(NSString *)sessionId
    token:(NSString *)token;
@property(nonatomic, copy) NSString * apiKey;
@property(nonatomic, copy) NSString * sessionId;
@property(nonatomic, copy) NSString * token;
@end

/// The codec used by FLTOpenTokHostApi.
NSObject<FlutterMessageCodec> *FLTOpenTokHostApiGetCodec(void);

@protocol FLTOpenTokHostApi
- (void)initSessionConfig:(FLTOpenTokConfig *)config error:(FlutterError *_Nullable *_Nonnull)error;
- (void)endSessionWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)toggleCameraWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)toggleAudioEnabled:(NSNumber *)enabled error:(FlutterError *_Nullable *_Nonnull)error;
- (void)toggleVideoEnabled:(NSNumber *)enabled error:(FlutterError *_Nullable *_Nonnull)error;
- (void)onPauseWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onResumeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onStopWithError:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSString *)getConnectionIdWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSString *> *)listAvailableOutputDevicesWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setOutputDeviceDevice:(FLTAudioOutputDevice)device error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTOpenTokHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOpenTokHostApi> *_Nullable api);

/// The codec used by FLTOpenTokPlatformApi.
NSObject<FlutterMessageCodec> *FLTOpenTokPlatformApiGetCodec(void);

@interface FLTOpenTokPlatformApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onStateUpdateConnectionState:(FLTConnectionStateCallback *)connectionState completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onOutputDeviceUpdateOutputDevice:(FLTAudioOutputDeviceCallback *)outputDevice completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onSubscriberCameraStateUpdateCameraState:(FLTCameraStateCallback *)cameraState completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
