// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "OpenTok.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTCameraStateCallback ()
+ (FLTCameraStateCallback *)fromList:(NSArray *)list;
+ (nullable FLTCameraStateCallback *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTAudioOutputDeviceCallback ()
+ (FLTAudioOutputDeviceCallback *)fromList:(NSArray *)list;
+ (nullable FLTAudioOutputDeviceCallback *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTConnectionStateCallback ()
+ (FLTConnectionStateCallback *)fromList:(NSArray *)list;
+ (nullable FLTConnectionStateCallback *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTOpenTokConfig ()
+ (FLTOpenTokConfig *)fromList:(NSArray *)list;
+ (nullable FLTOpenTokConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTCameraStateCallback
+ (instancetype)makeWithState:(FLTCameraState)state {
  FLTCameraStateCallback* pigeonResult = [[FLTCameraStateCallback alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (FLTCameraStateCallback *)fromList:(NSArray *)list {
  FLTCameraStateCallback *pigeonResult = [[FLTCameraStateCallback alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable FLTCameraStateCallback *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCameraStateCallback fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.state),
  ];
}
@end

@implementation FLTAudioOutputDeviceCallback
+ (instancetype)makeWithDevice:(FLTAudioOutputDevice)device {
  FLTAudioOutputDeviceCallback* pigeonResult = [[FLTAudioOutputDeviceCallback alloc] init];
  pigeonResult.device = device;
  return pigeonResult;
}
+ (FLTAudioOutputDeviceCallback *)fromList:(NSArray *)list {
  FLTAudioOutputDeviceCallback *pigeonResult = [[FLTAudioOutputDeviceCallback alloc] init];
  pigeonResult.device = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable FLTAudioOutputDeviceCallback *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTAudioOutputDeviceCallback fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.device),
  ];
}
@end

@implementation FLTConnectionStateCallback
+ (instancetype)makeWithState:(FLTConnectionState)state
    errorDescription:(nullable NSString *)errorDescription {
  FLTConnectionStateCallback* pigeonResult = [[FLTConnectionStateCallback alloc] init];
  pigeonResult.state = state;
  pigeonResult.errorDescription = errorDescription;
  return pigeonResult;
}
+ (FLTConnectionStateCallback *)fromList:(NSArray *)list {
  FLTConnectionStateCallback *pigeonResult = [[FLTConnectionStateCallback alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.errorDescription = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FLTConnectionStateCallback *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTConnectionStateCallback fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.state),
    (self.errorDescription ?: [NSNull null]),
  ];
}
@end

@implementation FLTOpenTokConfig
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    sessionId:(NSString *)sessionId
    token:(NSString *)token {
  FLTOpenTokConfig* pigeonResult = [[FLTOpenTokConfig alloc] init];
  pigeonResult.apiKey = apiKey;
  pigeonResult.sessionId = sessionId;
  pigeonResult.token = token;
  return pigeonResult;
}
+ (FLTOpenTokConfig *)fromList:(NSArray *)list {
  FLTOpenTokConfig *pigeonResult = [[FLTOpenTokConfig alloc] init];
  pigeonResult.apiKey = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.apiKey != nil, @"");
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.sessionId != nil, @"");
  pigeonResult.token = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.token != nil, @"");
  return pigeonResult;
}
+ (nullable FLTOpenTokConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTOpenTokConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.apiKey ?: [NSNull null]),
    (self.sessionId ?: [NSNull null]),
    (self.token ?: [NSNull null]),
  ];
}
@end

@interface FLTOpenTokHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTOpenTokHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTOpenTokConfig fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTOpenTokHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTOpenTokHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTOpenTokConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTOpenTokHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOpenTokHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOpenTokHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOpenTokHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOpenTokHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTOpenTokHostApiCodecReaderWriter *readerWriter = [[FLTOpenTokHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTOpenTokHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOpenTokHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.initSession"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initSessionConfig:error:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(initSessionConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTOpenTokConfig *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api initSessionConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.endSession"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endSessionWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(endSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.toggleCamera"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toggleCameraWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(toggleCameraWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api toggleCameraWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.toggleAudio"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toggleAudioEnabled:error:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(toggleAudioEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api toggleAudioEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.toggleVideo"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toggleVideoEnabled:error:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(toggleVideoEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api toggleVideoEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.onPause"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onPauseWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(onPauseWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onPauseWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.onResume"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onResumeWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(onResumeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onResumeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.onStop"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onStopWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(onStopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onStopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.getConnectionId"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getConnectionIdWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(getConnectionIdWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getConnectionIdWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.listAvailableOutputDevices"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(listAvailableOutputDevicesWithError:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(listAvailableOutputDevicesWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<NSString *> *output = [api listAvailableOutputDevicesWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OpenTokHostApi.setOutputDevice"
        binaryMessenger:binaryMessenger
        codec:FLTOpenTokHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setOutputDeviceDevice:error:)], @"FLTOpenTokHostApi api (%@) doesn't respond to @selector(setOutputDeviceDevice:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTAudioOutputDevice arg_device = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setOutputDeviceDevice:arg_device error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTOpenTokPlatformApiCodecReader : FlutterStandardReader
@end
@implementation FLTOpenTokPlatformApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTAudioOutputDeviceCallback fromList:[self readValue]];
    case 129: 
      return [FLTCameraStateCallback fromList:[self readValue]];
    case 130: 
      return [FLTConnectionStateCallback fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTOpenTokPlatformApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTOpenTokPlatformApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTAudioOutputDeviceCallback class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCameraStateCallback class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTConnectionStateCallback class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTOpenTokPlatformApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOpenTokPlatformApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOpenTokPlatformApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOpenTokPlatformApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOpenTokPlatformApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTOpenTokPlatformApiCodecReaderWriter *readerWriter = [[FLTOpenTokPlatformApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FLTOpenTokPlatformApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOpenTokPlatformApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onStateUpdateConnectionState:(FLTConnectionStateCallback *)arg_connectionState completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OpenTokPlatformApi.onStateUpdate"
      binaryMessenger:self.binaryMessenger
      codec:FLTOpenTokPlatformApiGetCodec()];
  [channel sendMessage:@[arg_connectionState ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onOutputDeviceUpdateOutputDevice:(FLTAudioOutputDeviceCallback *)arg_outputDevice completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OpenTokPlatformApi.onOutputDeviceUpdate"
      binaryMessenger:self.binaryMessenger
      codec:FLTOpenTokPlatformApiGetCodec()];
  [channel sendMessage:@[arg_outputDevice ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSubscriberCameraStateUpdateCameraState:(FLTCameraStateCallback *)arg_cameraState completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OpenTokPlatformApi.onSubscriberCameraStateUpdate"
      binaryMessenger:self.binaryMessenger
      codec:FLTOpenTokPlatformApiGetCodec()];
  [channel sendMessage:@[arg_cameraState ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

